{"ast":null,"code":"var _jsxFileName = \"/Users/mohit/Documents/GitHub/seniorProjectFrontEnd/src/views/StockList.jsx\";\nimport React, { Component } from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport Iframe from 'react-iframe';\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport ApolloClient from 'apollo-boost';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios';\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\";\nimport TweetList from \"./TweetList\";\nimport CurrentPositions from './CurrentPositions'; // import { Tasks } from \"components/Tasks/Tasks.jsx\";\n\nimport { dataPie, legendPie, dataSales, optionsSales, responsiveSales, legendSales, dataBar, optionsBar, responsiveBar, legendBar } from \"variables/Variables.jsx\";\nimport { get } from \"https\";\nimport { requiredSubselectionMessage } from \"graphql/validation/rules/ScalarLeafs\";\nimport { number } from \"prop-types\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweetCount: 0,\n      accountData: {},\n      piDataPositions: {\n        labels: [\"40%\", \"20%\", \"40%\"],\n        series: [40, 20, 40]\n      },\n      tickers: [\"TSLA\", \"AMZN\", \"WMT\", \"AAPL\", \"JNJ\", \"GOOG\", \"XOM\", \"GE\", \"JPM\"],\n      rsiWeight: 0,\n      bollingerWeight: 0,\n      fourWeight: 0,\n      twitterWeight: 0,\n      companyWeight: 0,\n      weightLabels: [\"RSI\", \"Bollinger Bands\", \"Four Candle\", \"Twitter\", \"Company\"],\n      avgWeightLineRSI: [],\n      avgWeightLineBollinger: [],\n      avgWeightLineFourCandle: [],\n      avgWeightLineRSITwitter: [],\n      avgWeightLineRSICompany: []\n    };\n  }\n\n  setNumberOfTweets(count) {\n    this.setState({\n      tweetCount: count\n    });\n  }\n\n  componentDidMount() {\n    const axiosSp = axios.create({\n      baseURL: 'https://seniorprojectu.herokuapp.com/graphql'\n    });\n    const getData = \"\\n    query{pricesUniverse { ticker openPrice closePrice bull}}\\n    \";\n    const getTweets = \"\\n    query{\\n      recentTweets(ticker:\\\"Amazon\\\"){\\n              tweet\\n            rating\\n          }\\n      }\\n    \"; // for weights chart of single graph\n\n    const weights = \"\\n    query{\\n      RecentWeights(ticker: \\\"TSLA\\\", count: 15) {\\n          ticker\\n          fourWeight\\n          profitWeight\\n          twitterWeight\\n          movingWeight\\n          companyWeight\\n          date\\n      }\\n  }\\n\";\n    const positions = \"\\n      query{\\n        GetPositions {\\n          ticker\\n        }\\n      }\\n    \";\n    const tweetCount = \"\\n    query{\\n      TweetCount\\n    }\\n    \";\n    const getAccount = \"\\n    query{\\n      getAccount\\n    }\\n    \";\n    const pricePagination = \"\\n      query{\\n        pricePagination(page: 1, perPage: 20, sort: DATE_ASC) {\\n          count\\n          items {\\n            ticker\\n          }\\n        }\\n      }\\n    \";\n    const getPositions = \"\\n    query{\\n      getPositions\\n    } \\n    \";\n    const getWeight = \"query{\\n      MostRecentWeight(ticker:\\\"TSLA\\\"){\\n        ticker\\n        twitterWeight\\n        fourWeight\\n        profitWeight\\n        movingWeight\\n        companyWeight\\n      }\\n    }\\n    \";\n    const tweetMany = \"query{\\n      tweetMany(filter:{company:\\\"GOOGL\\\"}){\\n      company\\n      tweet\\n      rating\\n    }\\n  }\\n    \";\n    const count = 15 * 9;\n    this.state.tickers.map(ticker => {\n      const RecentWeights = \"\\n      query{\\n        RecentWeights(ticker: \\\"\".concat(ticker, \"\\\", count: 15) {\\n            ticker\\n            fourWeight\\n            profitWeight\\n            twitterWeight\\n            movingWeight\\n            companyWeight\\n            date\\n        }\\n    }\\n  \");\n      axiosSp.post('', {\n        query: RecentWeights\n      }).then(result => {// const weightData = result[\"data\"][\"data\"][\"RecentWeights\"];\n        // console.log(\"logging weight data\");\n        // console.log(weightData);\n        // // let posis = [];\n        // // let labels = [];\n        // weightData.map(a => {\n        //   console.log(\"printing a\");\n        //   console.log(a);\n        //   let rsi = this.state.rsiWeight;\n        //   let bollinger = this.state.bollingerWeight;\n        //   let fourWeightc = this.state.fourWeight;\n        //   let twitterWeightc = this.state.twitterWeight;\n        //   let companyWeightc = this.state.companyWeight;\n        //   let awr = this.state.avgWeightLineRSI;\n        //   let awB = this.state.avgWeightLineBollinger;\n        //   let awf = this.state.avgWeightLineFourCandle;\n        //   let awt = this.state.avgWeightLineRSITwitter;\n        //   let awc = this.state.avgWeightLineRSICompany;\n        //     rsi += parseInt(a.movingWeight);\n        //     bollinger += parseInt(a.profitWeight);\n        //     twitterWeightc += parseInt(a.twitterWeight);\n        //     fourWeightc += parseInt(a.fourWeight);\n        //     companyWeightc += parseInt(a.companyWeight);\n        //     awr.push(rsi)\n        //     // labels.push(a.symbol)\n        //     this.setState({rsiWeight: rsi,\n        //     bollingerWeight: bollinger,\n        //     fourWeight: fourWeightc,\n        //     twitterWeight: twitterWeightc,\n        //     companyWeight: companyWeightc,\n        //     });\n        //     this.setState({\n        //       weightLabels: [`RSI ${(rsi / count).toFixed(2)}`, `Bollinger Bands ${(bollinger / count).toFixed(2)}`, `Four Candle ${(fourWeightc / count).toFixed(2)}`, `Twitter ${(twitterWeightc / count).toFixed(2)}`, `Company ${(companyWeightc / count).toFixed(2)}` ]\n        //     })\n        //     console.log(\"state.rsi\")\n        //     console.log(this.state.rsiWeight / count);\n        // });\n      }); // console.log(rsi);\n      // console.log(\"printing avg\");\n      // console.log(rsi / count);\n    });\n  }\n\n  createLegend(json) {\n    var legend = [];\n\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(React.createElement(\"i\", {\n        className: type,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }));\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n\n    return legend;\n  }\n\n  render() {\n    function portfolioValue(equity) {\n      const pl = equity - 100000;\n      return pl.toFixed(2);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(Iframe, {\n      url: \"https://stocktradingdashboard.herokuapp.com/\",\n      width: \"100%\",\n      height: \"2000px\",\n      id: \"myId\",\n      className: \"myClassname\",\n      display: \"initial\",\n      position: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/mohit/Documents/GitHub/seniorProjectFrontEnd/src/views/StockList.jsx"],"names":["React","Component","ChartistGraph","Iframe","Grid","Row","Col","ApolloClient","gql","axios","Card","StatsCard","TweetList","CurrentPositions","dataPie","legendPie","dataSales","optionsSales","responsiveSales","legendSales","dataBar","optionsBar","responsiveBar","legendBar","get","requiredSubselectionMessage","number","Dashboard","constructor","props","state","tweetCount","accountData","piDataPositions","labels","series","tickers","rsiWeight","bollingerWeight","fourWeight","twitterWeight","companyWeight","weightLabels","avgWeightLineRSI","avgWeightLineBollinger","avgWeightLineFourCandle","avgWeightLineRSITwitter","avgWeightLineRSICompany","setNumberOfTweets","count","setState","componentDidMount","axiosSp","create","baseURL","getData","getTweets","weights","positions","getAccount","pricePagination","getPositions","getWeight","tweetMany","map","ticker","RecentWeights","post","query","then","result","createLegend","json","legend","i","length","type","push","render","portfolioValue","equity","pl","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport Iframe from 'react-iframe'\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport ApolloClient from 'apollo-boost';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios'\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\";\nimport TweetList from \"./TweetList\";\nimport CurrentPositions from './CurrentPositions';\n// import { Tasks } from \"components/Tasks/Tasks.jsx\";\nimport {\n  dataPie,\n  legendPie,\n  dataSales,\n  optionsSales,\n  responsiveSales,\n  legendSales,\n  dataBar,\n  optionsBar,\n  responsiveBar,\n  legendBar\n} from \"variables/Variables.jsx\";\nimport { get } from \"https\";\nimport { requiredSubselectionMessage } from \"graphql/validation/rules/ScalarLeafs\";\nimport { number } from \"prop-types\";\n\nclass Dashboard extends Component {\n\n  constructor(props){\n\n    super(props);\n\n    this.state = {\n      tweetCount: 0,\n      accountData: {},\n      piDataPositions: {\n        labels: [\"40%\", \"20%\", \"40%\"],\n        series: [40, 20, 40]\n      },\n      tickers: [\"TSLA\", \"AMZN\", \"WMT\", \"AAPL\", \"JNJ\", \"GOOG\", \"XOM\", \"GE\", \"JPM\"],\n      rsiWeight: 0,\n      bollingerWeight: 0,\n      fourWeight: 0,\n      twitterWeight: 0,\n      companyWeight: 0,\n      weightLabels: [\"RSI\", \"Bollinger Bands\", \"Four Candle\", \"Twitter\", \"Company\" ],\n      avgWeightLineRSI: [],\n      avgWeightLineBollinger: [],\n      avgWeightLineFourCandle: [],\n      avgWeightLineRSITwitter: [],\n      avgWeightLineRSICompany: [],\n    }\n\n  }\n\n  setNumberOfTweets(count){\n    this.setState({\n      tweetCount: count,\n    })\n  };\n\n  componentDidMount(){\n\n    const axiosSp = axios.create({\n      baseURL: 'https://seniorprojectu.herokuapp.com/graphql',\n    });\n\n    const getData = `\n    query{pricesUniverse { ticker openPrice closePrice bull}}\n    `;\n\n\n\n\n    const getTweets = \n    `\n    query{\n      recentTweets(ticker:\"Amazon\"){\n              tweet\n            rating\n          }\n      }\n    `\n\n\n    // for weights chart of single graph\n    const weights = `\n    query{\n      RecentWeights(ticker: \"TSLA\", count: 15) {\n          ticker\n          fourWeight\n          profitWeight\n          twitterWeight\n          movingWeight\n          companyWeight\n          date\n      }\n  }\n`;\n\n    const positions = `\n      query{\n        GetPositions {\n          ticker\n        }\n      }\n    `;\n\n    const tweetCount = `\n    query{\n      TweetCount\n    }\n    `;\n\n    const getAccount = `\n    query{\n      getAccount\n    }\n    `;\n\n    const pricePagination = `\n      query{\n        pricePagination(page: 1, perPage: 20, sort: DATE_ASC) {\n          count\n          items {\n            ticker\n          }\n        }\n      }\n    `;\n\n    const getPositions = `\n    query{\n      getPositions\n    } \n    `\n    \n\n    const getWeight = \n    `query{\n      MostRecentWeight(ticker:\"TSLA\"){\n        ticker\n        twitterWeight\n        fourWeight\n        profitWeight\n        movingWeight\n        companyWeight\n      }\n    }\n    `\n\n    const tweetMany = \n    `query{\n      tweetMany(filter:{company:\"GOOGL\"}){\n      company\n      tweet\n      rating\n    }\n  }\n    `;\n\n\n    const count = 15 * 9;\n    this.state.tickers.map(ticker => {\n\n            const RecentWeights = `\n      query{\n        RecentWeights(ticker: \"${ticker}\", count: 15) {\n            ticker\n            fourWeight\n            profitWeight\n            twitterWeight\n            movingWeight\n            companyWeight\n            date\n        }\n    }\n  `;\n      axiosSp\n      .post('', {query: RecentWeights})\n      .then(result => {\n        // const weightData = result[\"data\"][\"data\"][\"RecentWeights\"];\n        // console.log(\"logging weight data\");\n        // console.log(weightData);\n        // // let posis = [];\n        // // let labels = [];\n        // weightData.map(a => {\n        //   console.log(\"printing a\");\n        //   console.log(a);\n        //   let rsi = this.state.rsiWeight;\n        //   let bollinger = this.state.bollingerWeight;\n        //   let fourWeightc = this.state.fourWeight;\n        //   let twitterWeightc = this.state.twitterWeight;\n        //   let companyWeightc = this.state.companyWeight;\n        //   let awr = this.state.avgWeightLineRSI;\n        //   let awB = this.state.avgWeightLineBollinger;\n        //   let awf = this.state.avgWeightLineFourCandle;\n        //   let awt = this.state.avgWeightLineRSITwitter;\n        //   let awc = this.state.avgWeightLineRSICompany;\n        //     rsi += parseInt(a.movingWeight);\n        //     bollinger += parseInt(a.profitWeight);\n        //     twitterWeightc += parseInt(a.twitterWeight);\n        //     fourWeightc += parseInt(a.fourWeight);\n        //     companyWeightc += parseInt(a.companyWeight);\n        //     awr.push(rsi)\n        //     // labels.push(a.symbol)\n        //     this.setState({rsiWeight: rsi,\n        //     bollingerWeight: bollinger,\n        //     fourWeight: fourWeightc,\n        //     twitterWeight: twitterWeightc,\n        //     companyWeight: companyWeightc,\n        //     });\n        //     this.setState({\n        //       weightLabels: [`RSI ${(rsi / count).toFixed(2)}`, `Bollinger Bands ${(bollinger / count).toFixed(2)}`, `Four Candle ${(fourWeightc / count).toFixed(2)}`, `Twitter ${(twitterWeightc / count).toFixed(2)}`, `Company ${(companyWeightc / count).toFixed(2)}` ]\n        //     })\n        //     console.log(\"state.rsi\")\n        //     console.log(this.state.rsiWeight / count);\n        // });\n    })\n\n    // console.log(rsi);\n    // console.log(\"printing avg\");\n    // console.log(rsi / count);\n      \n    })\n\n\n\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n  render() {\n\n    function portfolioValue(equity){\n      const pl = equity - 100000;\n        return pl.toFixed(2);\n    }\n\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n              <Col md={12}>\n              <Iframe url=\"https://stocktradingdashboard.herokuapp.com/\"\n        width=\"100%\"\n        height=\"2000px\"\n        id=\"myId\"\n        className=\"myClassname\"\n        display=\"initial\"\n        position=\"relative\"/>\n              </Col>\n          </Row>\n\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}