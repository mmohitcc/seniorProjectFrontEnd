{"ast":null,"code":"var _jsxFileName = \"/Users/mohit/Desktop/Senior Project Copy/Senior Project/src/views/Dashboard.jsx\";\nimport React, { Component } from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport ApolloClient from 'apollo-boost';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios';\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\";\nimport TweetList from \"./TweetList\";\nimport CurrentPositions from './CurrentPositions'; // import { Tasks } from \"components/Tasks/Tasks.jsx\";\n\nimport { dataPie, legendPie, dataSales, optionsSales, responsiveSales, legendSales, dataBar, optionsBar, responsiveBar, legendBar } from \"variables/Variables.jsx\";\nimport { get } from \"https\";\nimport { requiredSubselectionMessage } from \"graphql/validation/rules/ScalarLeafs\";\nimport { number } from \"prop-types\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweetCount: 0,\n      accountData: {},\n      piDataPositions: {\n        labels: [\"40%\", \"20%\", \"40%\"],\n        series: [40, 20, 40]\n      },\n      tickers: [\"TSLA\", \"AMZN\", \"WMT\", \"AAPL\", \"JNJ\", \"GOOG\", \"XOM\", \"GE\", \"JPM\"],\n      rsiWeight: 0,\n      bollingerWeight: 0,\n      fourWeight: 0,\n      twitterWeight: 0,\n      companyWeight: 0,\n      weightLabels: [\"RSI\", \"Bollinger Bands\", \"Four Candle\", \"Twitter\", \"Company\"]\n    };\n  }\n\n  setNumberOfTweets(count) {\n    this.setState({\n      tweetCount: count\n    });\n  }\n\n  componentDidMount() {\n    const axiosSp = axios.create({\n      baseURL: 'https://seniorprojectu.herokuapp.com/graphql'\n    });\n    const getData = \"\\n    query{pricesUniverse { ticker openPrice closePrice bull}}\\n    \";\n    const getTweets = \"\\n    query{\\n      recentTweets(ticker:\\\"Amazon\\\"){\\n              tweet\\n            rating\\n          }\\n      }\\n    \"; // for weights chart of single graph\n\n    const weights = \"\\n    query{\\n      RecentWeights(ticker: \\\"TSLA\\\", count: 15) {\\n          ticker\\n          fourWeight\\n          profitWeight\\n          twitterWeight\\n          movingWeight\\n          companyWeight\\n          date\\n      }\\n  }\\n\";\n    const positions = \"\\n      query{\\n        GetPositions {\\n          ticker\\n        }\\n      }\\n    \";\n    const tweetCount = \"\\n    query{\\n      TweetCount\\n    }\\n    \";\n    const getAccount = \"\\n    query{\\n      getAccount\\n    }\\n    \";\n    const pricePagination = \"\\n      query{\\n        pricePagination(page: 1, perPage: 20, sort: DATE_ASC) {\\n          count\\n          items {\\n            ticker\\n          }\\n        }\\n      }\\n    \";\n    const getPositions = \"\\n    query{\\n      getPositions\\n    } \\n    \";\n    const getWeight = \"query{\\n      MostRecentWeight(ticker:\\\"TSLA\\\"){\\n        ticker\\n        twitterWeight\\n        fourWeight\\n        profitWeight\\n        movingWeight\\n        companyWeight\\n      }\\n    }\\n    \";\n    const tweetMany = \"query{\\n      tweetMany(filter:{company:\\\"GOOGL\\\"}){\\n      company\\n      tweet\\n      rating\\n    }\\n  }\\n    \";\n    const count = 15 * 9;\n    this.state.tickers.map(ticker => {\n      const RecentWeights = \"\\n      query{\\n        RecentWeights(ticker: \\\"\".concat(ticker, \"\\\", count: 15) {\\n            ticker\\n            fourWeight\\n            profitWeight\\n            twitterWeight\\n            movingWeight\\n            companyWeight\\n            date\\n        }\\n    }\\n  \");\n      axiosSp.post('', {\n        query: RecentWeights\n      }).then(result => {\n        const weightData = result[\"data\"][\"data\"][\"RecentWeights\"];\n        console.log(\"logging weight data\");\n        console.log(weightData); // let posis = [];\n        // let labels = [];\n\n        weightData.map(a => {\n          console.log(\"printing a\");\n          console.log(a);\n          let rsi = this.state.rsiWeight;\n          let bollinger = this.state.bollingerWeight;\n          let fourWeightc = this.state.fourWeight;\n          let twitterWeightc = this.state.twitterWeight;\n          let companyWeightc = this.state.companyWeight;\n          rsi += parseInt(a.movingWeight);\n          bollinger += parseInt(a.profitWeight);\n          twitterWeightc += parseInt(a.twitterWeight);\n          fourWeightc += parseInt(a.fourWeight);\n          companyWeightc += parseInt(a.companyWeight); // labels.push(a.symbol)\n\n          this.setState({\n            rsiWeight: rsi,\n            bollingerWeight: bollinger,\n            fourWeight: fourWeightc,\n            twitterWeight: twitterWeightc,\n            companyWeight: companyWeightc\n          });\n          console.log(\"state.rsi\");\n          console.log(this.state.rsiWeight / count);\n        });\n      }); // console.log(rsi);\n      // console.log(\"printing avg\");\n      // console.log(rsi / count);\n    });\n    axiosSp.post('', {\n      query: getPositions\n    }).then(result => {\n      this.setState({\n        positionData: result[\"data\"][\"data\"][\"getPositions\"]\n      });\n      const positionsData = result[\"data\"][\"data\"][\"getPositions\"];\n      let totalValue = 0;\n      let posis = [];\n      let labels = [];\n      positionsData.map(a => {\n        posis.push(a.market_value);\n        labels.push(a.symbol);\n      });\n      let posisData = this.state.piDataPositions;\n      posisData.series = posis;\n      posisData.labels = labels;\n      this.setState({\n        piDataPositions: posisData\n      });\n      console.log(\"inside here\");\n      console.log(posis);\n      console.log(labels);\n      console.log(this.state.positionData);\n    });\n    axiosSp.post('', {\n      query: getAccount\n    }).then(result => {\n      this.setState({\n        accountData: result[\"data\"][\"data\"][\"getAccount\"]\n      });\n      console.log(this.state.accountData);\n    });\n    let numberOfTweets = 0;\n    axiosSp.post('', {\n      query: tweetCount\n    }).then(result => {\n      numberOfTweets = result[\"data\"][\"data\"][\"TweetCount\"];\n      this.setNumberOfTweets(numberOfTweets);\n      console.log(numberOfTweets);\n    }); // this.setState({tweetCount: numberOfTweets});\n\n    axiosSp.post('', {\n      query: pricePagination\n    }).then(result => console.log(result)); // const client = new ApolloClient({\n    //   uri: 'https://seniorprojectu.herokuapp.com/graphql',\n    //   fetchOptions: {\n    //     mode: \"no-cors\",\n    //     headers: { 'Content-Type': 'application/json' },\n    // \t},\n    // })\n    // client\n    // .query({\n    //   query: gql`\n    //     query{pricesUniverse {ticker openPrice closePrice}}\n    //   `\n    // })\n    // .then(result => console.log(result));\n  }\n\n  createLegend(json) {\n    var legend = [];\n\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(React.createElement(\"i\", {\n        className: type,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }));\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n\n    return legend;\n  }\n\n  render() {\n    function portfolioValue(equity) {\n      const pl = equity - 100000;\n      return pl.toFixed(2);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(StatsCard, {\n      bigIcon: React.createElement(\"i\", {\n        className: \"pe-7s-wallet text-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }),\n      statsText: \"Portfolio Value\",\n      statsValue: this.state.accountData.last_equity,\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-refresh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }),\n      statsIconText: \"Updated now\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(StatsCard, {\n      bigIcon: React.createElement(\"i\", {\n        className: \"fa fa-dollar text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }),\n      statsText: \"Profit\",\n      statsValue: portfolioValue(this.state.accountData.last_equity),\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-calendar-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }),\n      statsIconText: \"Today\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(StatsCard, {\n      bigIcon: React.createElement(\"i\", {\n        className: \"pe-7s-graph1 text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }),\n      statsText: \"Trades\",\n      statsValue: this.state.accountData.daytrade_count,\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-clock-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }),\n      statsIconText: \"All Time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(StatsCard, {\n      bigIcon: React.createElement(\"i\", {\n        className: \"fa fa-twitter text-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }),\n      statsText: \"Tweets Analyzed\",\n      statsValue: this.state.tweetCount,\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-refresh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }),\n      statsIconText: \"Updated now\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(CurrentPositions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-clock-o\",\n      title: \"Portfolio\",\n      category: \"Portfolio Split\",\n      stats: \"\",\n      content: React.createElement(\"div\", {\n        id: \"chartPreferences\",\n        className: \"ct-chart ct-perfect-fourth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: this.state.piDataPositions,\n        type: \"Pie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-clock-o\",\n      title: \"Machine Learning Weights\",\n      category: \"Machine Learning Weight Split\",\n      stats: \"\",\n      content: React.createElement(\"div\", {\n        id: \"chartPreferences\",\n        className: \"ct-chart ct-perfect-fourth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: {\n          labels: this.state.weightLabels,\n          series: [this.state.rsiWeight, this.state.bollingerWeight, this.state.fourWeight, this.state.twitterWeight, this.state.companyWeight]\n        },\n        type: \"Pie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-history\",\n      id: \"chartHours\",\n      title: \"Portfolio Value\",\n      category: \"All time performance\",\n      stats: \"Updated 3 minutes ago\",\n      content: React.createElement(\"div\", {\n        className: \"ct-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: dataSales,\n        type: \"Line\",\n        options: optionsSales,\n        responsiveOptions: responsiveSales,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      })),\n      legend: React.createElement(\"div\", {\n        className: \"legend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, this.createLegend(legendSales)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-history\",\n      id: \"chartHours\",\n      title: \"Portfolio Value\",\n      category: \"All time performance\",\n      stats: \"Updated 3 minutes ago\",\n      content: React.createElement(\"div\", {\n        className: \"ct-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: dataSales,\n        type: \"Line\",\n        options: optionsSales,\n        responsiveOptions: responsiveSales,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      })),\n      legend: React.createElement(\"div\", {\n        className: \"legend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, this.createLegend(legendSales)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-history\",\n      id: \"chartHours\",\n      title: \"Portfolio Value\",\n      category: \"All time performance\",\n      stats: \"Updated 3 minutes ago\",\n      content: React.createElement(\"div\", {\n        className: \"ct-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: dataSales,\n        type: \"Line\",\n        options: optionsSales,\n        responsiveOptions: responsiveSales,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      })),\n      legend: React.createElement(\"div\", {\n        className: \"legend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, this.createLegend(legendSales)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(Card, {\n      statsIcon: \"fa fa-clock-o\",\n      title: \"Machine Learning Statistics\",\n      category: \"Last Campaign Performance\",\n      stats: \"Campaign sent 2 days ago\",\n      content: React.createElement(\"div\", {\n        id: \"chartPreferences\",\n        className: \"ct-chart ct-perfect-fourth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: dataPie,\n        type: \"Pie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      })),\n      legend: React.createElement(\"div\", {\n        className: \"legend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, this.createLegend(legendPie)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"chartActivity\",\n      title: \"Profit Loss\",\n      category: \"Top 10 stocks\",\n      stats: \"Data information certified\",\n      statsIcon: \"fa fa-check\",\n      content: React.createElement(\"div\", {\n        className: \"ct-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, React.createElement(ChartistGraph, {\n        data: dataBar,\n        type: \"Bar\",\n        options: optionsBar,\n        responsiveOptions: responsiveBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      })),\n      legend: React.createElement(\"div\", {\n        className: \"legend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, this.createLegend(legendBar)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/mohit/Desktop/Senior Project Copy/Senior Project/src/views/Dashboard.jsx"],"names":["React","Component","ChartistGraph","Grid","Row","Col","ApolloClient","gql","axios","Card","StatsCard","TweetList","CurrentPositions","dataPie","legendPie","dataSales","optionsSales","responsiveSales","legendSales","dataBar","optionsBar","responsiveBar","legendBar","get","requiredSubselectionMessage","number","Dashboard","constructor","props","state","tweetCount","accountData","piDataPositions","labels","series","tickers","rsiWeight","bollingerWeight","fourWeight","twitterWeight","companyWeight","weightLabels","setNumberOfTweets","count","setState","componentDidMount","axiosSp","create","baseURL","getData","getTweets","weights","positions","getAccount","pricePagination","getPositions","getWeight","tweetMany","map","ticker","RecentWeights","post","query","then","result","weightData","console","log","a","rsi","bollinger","fourWeightc","twitterWeightc","companyWeightc","parseInt","movingWeight","profitWeight","positionData","positionsData","totalValue","posis","push","market_value","symbol","posisData","numberOfTweets","createLegend","json","legend","i","length","type","render","portfolioValue","equity","pl","toFixed","last_equity","daytrade_count"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport ApolloClient from 'apollo-boost';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios'\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\";\nimport TweetList from \"./TweetList\";\nimport CurrentPositions from './CurrentPositions';\n// import { Tasks } from \"components/Tasks/Tasks.jsx\";\nimport {\n  dataPie,\n  legendPie,\n  dataSales,\n  optionsSales,\n  responsiveSales,\n  legendSales,\n  dataBar,\n  optionsBar,\n  responsiveBar,\n  legendBar\n} from \"variables/Variables.jsx\";\nimport { get } from \"https\";\nimport { requiredSubselectionMessage } from \"graphql/validation/rules/ScalarLeafs\";\nimport { number } from \"prop-types\";\n\nclass Dashboard extends Component {\n\n  constructor(props){\n\n    super(props);\n\n    this.state = {\n      tweetCount: 0,\n      accountData: {},\n      piDataPositions: {\n        labels: [\"40%\", \"20%\", \"40%\"],\n        series: [40, 20, 40]\n      },\n      tickers: [\"TSLA\", \"AMZN\", \"WMT\", \"AAPL\", \"JNJ\", \"GOOG\", \"XOM\", \"GE\", \"JPM\"],\n      rsiWeight: 0,\n      bollingerWeight: 0,\n      fourWeight: 0,\n      twitterWeight: 0,\n      companyWeight: 0,\n      weightLabels: [\"RSI\", \"Bollinger Bands\", \"Four Candle\", \"Twitter\", \"Company\" ],\n    }\n\n  }\n\n  setNumberOfTweets(count){\n    this.setState({\n      tweetCount: count,\n    })\n  };\n\n  componentDidMount(){\n\n    const axiosSp = axios.create({\n      baseURL: 'https://seniorprojectu.herokuapp.com/graphql',\n    });\n\n    const getData = `\n    query{pricesUniverse { ticker openPrice closePrice bull}}\n    `;\n\n\n\n\n    const getTweets = \n    `\n    query{\n      recentTweets(ticker:\"Amazon\"){\n              tweet\n            rating\n          }\n      }\n    `\n\n\n    // for weights chart of single graph\n    const weights = `\n    query{\n      RecentWeights(ticker: \"TSLA\", count: 15) {\n          ticker\n          fourWeight\n          profitWeight\n          twitterWeight\n          movingWeight\n          companyWeight\n          date\n      }\n  }\n`;\n\n    const positions = `\n      query{\n        GetPositions {\n          ticker\n        }\n      }\n    `;\n\n    const tweetCount = `\n    query{\n      TweetCount\n    }\n    `;\n\n    const getAccount = `\n    query{\n      getAccount\n    }\n    `;\n\n    const pricePagination = `\n      query{\n        pricePagination(page: 1, perPage: 20, sort: DATE_ASC) {\n          count\n          items {\n            ticker\n          }\n        }\n      }\n    `;\n\n    const getPositions = `\n    query{\n      getPositions\n    } \n    `\n    \n\n    const getWeight = \n    `query{\n      MostRecentWeight(ticker:\"TSLA\"){\n        ticker\n        twitterWeight\n        fourWeight\n        profitWeight\n        movingWeight\n        companyWeight\n      }\n    }\n    `\n\n    const tweetMany = \n    `query{\n      tweetMany(filter:{company:\"GOOGL\"}){\n      company\n      tweet\n      rating\n    }\n  }\n    `;\n\n\n    const count = 15 * 9;\n    this.state.tickers.map(ticker => {\n\n            const RecentWeights = `\n      query{\n        RecentWeights(ticker: \"${ticker}\", count: 15) {\n            ticker\n            fourWeight\n            profitWeight\n            twitterWeight\n            movingWeight\n            companyWeight\n            date\n        }\n    }\n  `;\n      axiosSp\n      .post('', {query: RecentWeights})\n      .then(result => {\n        const weightData = result[\"data\"][\"data\"][\"RecentWeights\"];\n        console.log(\"logging weight data\");\n        console.log(weightData);\n        // let posis = [];\n        // let labels = [];\n        weightData.map(a => {\n          console.log(\"printing a\");\n          console.log(a);\n          let rsi = this.state.rsiWeight;\n          let bollinger = this.state.bollingerWeight;\n          let fourWeightc = this.state.fourWeight;\n          let twitterWeightc = this.state.twitterWeight;\n          let companyWeightc = this.state.companyWeight;\n            rsi += parseInt(a.movingWeight);\n            bollinger += parseInt(a.profitWeight);\n            twitterWeightc += parseInt(a.twitterWeight);\n            fourWeightc += parseInt(a.fourWeight);\n            companyWeightc += parseInt(a.companyWeight);\n            // labels.push(a.symbol)\n            this.setState({rsiWeight: rsi,\n            bollingerWeight: bollinger,\n            fourWeight: fourWeightc,\n            twitterWeight: twitterWeightc,\n            companyWeight: companyWeightc,\n            });\n            console.log(\"state.rsi\")\n            console.log(this.state.rsiWeight / count);\n        });\n    })\n\n    // console.log(rsi);\n    // console.log(\"printing avg\");\n    // console.log(rsi / count);\n      \n    })\n\n    \n\n\n    axiosSp\n    .post('', {query: getPositions})\n    .then(result => {\n      this.setState({positionData: result[\"data\"][\"data\"][\"getPositions\"]});\n      const positionsData = result[\"data\"][\"data\"][\"getPositions\"];\n      let totalValue = 0;\n      let posis = [];\n      let labels = [];\n      positionsData.map(a => {\n          posis.push(a.market_value)\n          labels.push(a.symbol)\n      });\n\n      let posisData = this.state.piDataPositions;\n      posisData.series = posis;\n      posisData.labels = labels;\n      this.setState({piDataPositions: posisData});\n      console.log(\"inside here\")\n      console.log(posis);\n      console.log(labels);\n      console.log(this.state.positionData);\n    });\n\n\n    axiosSp\n    .post('', {query: getAccount})\n    .then(result => {\n      this.setState({accountData: result[\"data\"][\"data\"][\"getAccount\"]});\n      console.log(this.state.accountData);\n    });\n\n    let numberOfTweets = 0;\n    axiosSp\n    .post('', {query: tweetCount})\n    .then(result => {\n      numberOfTweets = result[\"data\"][\"data\"][\"TweetCount\"]\n      this.setNumberOfTweets(numberOfTweets);\n      console.log(numberOfTweets);\n    });\n\n    \n    \n    // this.setState({tweetCount: numberOfTweets});\n\n    axiosSp\n    .post('', {query: pricePagination})\n    .then(result => console.log(result));\n\n\n    // const client = new ApolloClient({\n    //   uri: 'https://seniorprojectu.herokuapp.com/graphql',\n    //   fetchOptions: {\n    //     mode: \"no-cors\",\n    //     headers: { 'Content-Type': 'application/json' },\n\t\t// \t},\n    // })\n\n    // client\n    // .query({\n    //   query: gql`\n    //     query{pricesUniverse {ticker openPrice closePrice}}\n    //   `\n    // })\n    // .then(result => console.log(result));\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n  render() {\n\n    function portfolioValue(equity){\n      const pl = equity - 100000;\n        return pl.toFixed(2);\n    }\n\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n            <Col lg={3} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-wallet text-success\" />}\n                statsText=\"Portfolio Value\"\n                statsValue={this.state.accountData.last_equity}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"fa fa-dollar text-danger\" />}\n                statsText=\"Profit\"\n                statsValue={portfolioValue(this.state.accountData.last_equity)}\n                statsIcon={<i className=\"fa fa-calendar-o\" />}\n                statsIconText=\"Today\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-graph1 text-danger\" />}\n                statsText=\"Trades\"\n                statsValue= {this.state.accountData.daytrade_count}\n                statsIcon={<i className=\"fa fa-clock-o\" />}\n                statsIconText=\"All Time\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"fa fa-twitter text-info\" />}\n                statsText=\"Tweets Analyzed\"\n                statsValue={this.state.tweetCount}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n                < CurrentPositions />\n            </Col>\n            <Col md={6}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Portfolio\"\n                category=\"Portfolio Split\"\n                stats=\"\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={this.state.piDataPositions} type=\"Pie\" />\n                  </div>\n                }\n              />\n            </Col>\n            <Col md={6}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Machine Learning Weights\"\n                category=\"Machine Learning Weight Split\"\n                stats=\"\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={{labels: this.state.weightLabels, series: [this.state.rsiWeight, this.state.bollingerWeight, this.state.fourWeight ,this.state.twitterWeight, this.state.companyWeight]}} type=\"Pie\" />\n                  </div>\n                }\n              />\n            </Col>\n            <Col md={4}>\n              <Card\n                statsIcon=\"fa fa-history\"\n                id=\"chartHours\"\n                title=\"Portfolio Value\"\n                category=\"All time performance\"\n                stats=\"Updated 3 minutes ago\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataSales}\n                      type=\"Line\"\n                      options={optionsSales}\n                      responsiveOptions={responsiveSales}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendSales)}</div>\n                }\n              />\n            </Col>\n            <Col md={8}>\n              <Card\n                statsIcon=\"fa fa-history\"\n                id=\"chartHours\"\n                title=\"Portfolio Value\"\n                category=\"All time performance\"\n                stats=\"Updated 3 minutes ago\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataSales}\n                      type=\"Line\"\n                      options={optionsSales}\n                      responsiveOptions={responsiveSales}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendSales)}</div>\n                }\n              />\n            </Col>\n            <Col md={8}>\n              <Card\n                statsIcon=\"fa fa-history\"\n                id=\"chartHours\"\n                title=\"Portfolio Value\"\n                category=\"All time performance\"\n                stats=\"Updated 3 minutes ago\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataSales}\n                      type=\"Line\"\n                      options={optionsSales}\n                      responsiveOptions={responsiveSales}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendSales)}</div>\n                }\n              />\n            </Col>\n            <Col md={4}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Machine Learning Statistics\"\n                category=\"Last Campaign Performance\"\n                stats=\"Campaign sent 2 days ago\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={dataPie} type=\"Pie\" />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendPie)}</div>\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <Card\n                id=\"chartActivity\"\n                title=\"Profit Loss\"\n                category=\"Top 10 stocks\"\n                stats=\"Data information certified\"\n                statsIcon=\"fa fa-check\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataBar}\n                      type=\"Bar\"\n                      options={optionsBar}\n                      responsiveOptions={responsiveBar}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendBar)}</div>\n                }\n              />\n            </Col>\n\n            {/* <Col md={6}>\n              <Card\n                title=\"Tasks\"\n                category=\"Backend development\"\n                stats=\"Updated 3 minutes ago\"\n                statsIcon=\"fa fa-history\"\n                content={\n                  <div className=\"table-full-width\">\n                    <table className=\"table\">\n                      <Tasks />\n                    </table>\n                  </div>\n                }\n              />\n            </Col> */}\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}